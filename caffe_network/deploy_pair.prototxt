name: "CaffeNet"
input: "data"
input: "depth_prediction"
input_shape {
  dim: 1
  dim: 3
  dim: 228
  dim: 304
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  convolution_param {
    num_output: 96
    kernel_size: 11
    stride: 4
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "norm1"
  type: "LRN"
  bottom: "pool1"
  top: "norm1"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "norm1"
  top: "conv2"
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 5
    group: 2
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "norm2"
  type: "LRN"
  bottom: "pool2"
  top: "norm2"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "norm2"
  top: "conv3"
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv3"
  top: "conv3"
}
layer {
  name: "conv4"
  type: "Convolution"
  bottom: "conv3"
  top: "conv4"
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    group: 2
  }
}
layer {
  name: "relu4"
  type: "ReLU"
  bottom: "conv4"
  top: "conv4"
}
layer {
  name: "conv5"
  type: "Convolution"
  bottom: "conv4"
  top: "conv5"
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    group: 2
  }
}
layer {
  name: "relu5"
  type: "ReLU"
  bottom: "conv5"
  top: "conv5"
}
layer {
  name: "pool5"
  type: "Pooling"
  bottom: "conv5"
  top: "pool5"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}


##########################################################coarse network

layer {
  name: "full1"
  type: "InnerProduct"
  bottom: "pool5"
  top: "f_1"
  inner_product_param {
    num_output: 4096
  }
}
layer {
  name: "relu_f_1"
  type: "ReLU"
  bottom: "f_1"
  top: "f_1"
}
layer {
  name: "drop_f_1"
  type: "Dropout"
  bottom: "f_1"
  top: "f_1"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "full2"
  type: "InnerProduct"
  bottom: "f_1"
  top: "f_2"
  inner_product_param {
    num_output: 15428
  }
}
layer {
   name: "reshape"
    type: "Reshape"
    bottom: "f_2"
    top: "f2_reshape"
    reshape_param {
      shape {
        dim: 0  # copy the dimension from below
        dim: 58
        dim: 14
        dim: 19 # 
      }
    }
  }
layer {
      name: "upsample",
      type: "Deconvolution"
      bottom: "f2_reshape"
      top: "coarse_large"
      convolution_param {
      	kernel_size: 8
	stride: 4
	num_output: 58
	group: 58
	pad:2
	bias_term: false
      }
}
layer {
  name: "crop"
  type: "CropParam"
  bottom: "coarse_large"
  top: "coarse"
    cropparam_param {
      shape {
        dim: 55
        dim: 74 # 
      }
    }
}

############################################################scale 1 architecture 

layer {
  name: "conv_s2_1"
  type: "Convolution"
  bottom: "data"
  top: "conv_s2_1"

  convolution_param {
    num_output: 96
    kernel_size: 9
    stride: 2

  }
}
layer {
    bottom: "conv_s2_1"
    top: "conv_s2_1_bn"
    name: "conv_s2_1_bn"
    type: "BatchNorm"

}

layer {
  name: "relu_s2_1"
  type: "ReLU"
  bottom: "conv_s2_1_bn"
  top: "conv_s2_1_bn"
}
layer {
  name: "pool_s2_1"
  type: "Pooling"
  bottom: "conv_s2_1_bn"
  top: "pool_s2_1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}


layer {
  name: "concat"
  type: "Concat"
  bottom: "coarse"
  bottom: "pool_s2_1"
  bottom: "depth_prediction"
  top: "concat"
  concat_param {
    axis: 1
  }
}


layer {
  name: "conv_s2_2"
  type: "Convolution"
  bottom: "concat"
  top: "conv_s2_2"
  convolution_param {
    num_output: 64
    pad: 2
    kernel_size: 5

  }
}
layer {
    bottom: "conv_s2_2"
    top: "conv_s2_2_bn"
    name: "conv_s2_2_bn"
    type: "BatchNorm"
 
}

layer {
  name: "relu_s2_2"
  type: "ReLU"
  bottom: "conv_s2_2_bn"
  top: "conv_s2_2_bn"
}

layer {
  name: "conv_s2_3"
  type: "Convolution"
  bottom: "conv_s2_2_bn"
  top: "conv_s2_3"

  convolution_param {
    num_output: 64
    pad: 2
    kernel_size: 5

  }
}
layer {
    bottom: "conv_s2_3"
    top: "conv_s2_3_bn"
    name: "conv_s2_3_bn"
    type: "BatchNorm"

}

layer {
  name: "relu_s2_3"
  type: "ReLU"
  bottom: "conv_s2_3_bn"
  top: "conv_s2_3_bn"
}

layer {
  name: "conv_s2_4"
  type: "Convolution"
  bottom: "conv_s2_3_bn"
  top: "conv_s2_4"
  convolution_param {
    num_output: 64
    pad: 2
    kernel_size: 5

  }
}
layer {
    bottom: "conv_s2_4"
    top: "conv_s2_4_bn"
    name: "conv_s2_4_bn"
    type: "BatchNorm"

}

layer {
  name: "relu_s2_4"
  type: "ReLU"
  bottom: "conv_s2_4_bn"
  top: "conv_s2_4_bn"
}

layer {
  name: "conv_s2_5_depth"
  type: "Convolution"
  bottom: "conv_s2_4_bn"
  top: "depth_pred"

  convolution_param {
    num_output: 51
    pad: 2
    kernel_size: 5
  }
}

layer {
  name: "softmax_depth"
  type: "Softmax"
  bottom: "depth_pred"
  top: "output_depth"

}


layer {
  name: "conv_s2_5_normal"
  type: "Convolution"
  bottom: "conv_s2_4_bn"
  top: "normal_pred"

  convolution_param {
    num_output: 51
    pad: 2
    kernel_size: 5
  }
}


layer {
  name: "softmax_normal"
  type: "Softmax"
  bottom: "normal_pred"
  top: "output_normal"

}
